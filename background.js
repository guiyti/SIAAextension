// Background Script - Service Worker para Chrome Extension
console.log('üîß SIAA Data Extractor - Background Script iniciado');

// Listener para instala√ß√£o da extens√£o
chrome.runtime.onInstalled.addListener((details) => {
    console.log('üì¶ Extens√£o instalada:', details.reason);
    
    if (details.reason === 'install') {
        console.log('‚úÖ Primeira instala√ß√£o da extens√£o SIAA Data Extractor');
    } else if (details.reason === 'update') {
        console.log('üîÑ Extens√£o atualizada para vers√£o:', chrome.runtime.getManifest().version);
    }
});

// Fun√ß√£o para executar a extra√ß√£o usando chrome.scripting
async function executeExtraction(tabId, cursoSelecionado = null) {
    console.log('‚öôÔ∏è executeExtraction chamado com cursoSelecionado:', cursoSelecionado);
    try {
        console.log('üöÄ Iniciando extra√ß√£o via chrome.scripting para tab:', tabId);
        
        // Verificar se a aba √© v√°lida
        const tab = await chrome.tabs.get(tabId);
        
        if (!tab.url.includes('siaa.cruzeirodosul.edu.br')) {
            throw new Error('P√°gina n√£o √© do SIAA');
        }
        
        if (!tab.url.includes('novo-siaa/secure/core/home.jsf')) {
            throw new Error('Navegue para a p√°gina inicial do SIAA (home.jsf)');
        }
        
        // Notificar in√≠cio da extra√ß√£o
        console.log('üì° Enviando mensagem de progresso...');
        chrome.runtime.sendMessage({
            action: 'extractionProgress',
            message: 'Preparando extra√ß√£o...'
        }).catch(err => console.log('‚ÑπÔ∏è Popup pode estar fechado:', err));
        
        // Primeiro injetar o script que define as fun√ß√µes
        console.log('üíâ Injetando script injected.js...');
        await chrome.scripting.executeScript({
            target: { tabId: tabId },
            files: ['injected.js']
        });
        
        console.log('‚úÖ Script injected.js carregado');
        
        // Aguardar um pouco para garantir que o script foi carregado
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Depois executar a fun√ß√£o de extra√ß√£o
        console.log('üéØ Executando fun√ß√£o exportarTabelaSIAA...');
        const results = await chrome.scripting.executeScript({
            target: { tabId: tabId },
            func: (selectedCourse) => {
                // Tornar dispon√≠vel globalmente para eventuais fallbacks
                if (selectedCourse) {
                    window.__SIAA_SELECTED_COURSE = selectedCourse;
                }
                console.log('üîç Verificando fun√ß√£o exportarTabelaSIAA...');
                
                console.log('üìå selectedCourse dentro da p√°gina:', selectedCourse);
                if (typeof window.exportarTabelaSIAA === 'function') {
                    console.log('üöÄ Executando exportarTabelaSIAA...');
                    
                    // Executar a fun√ß√£o
                    try {
                        window.exportarTabelaSIAA(selectedCourse || null);
                        return { success: true, message: 'Fun√ß√£o executada com sucesso' };
                    } catch (execError) {
                        console.error('‚ùå Erro ao executar fun√ß√£o:', execError);
                        return { success: false, error: execError.message };
                    }
                } else {
                    console.error('‚ùå Fun√ß√£o exportarTabelaSIAA n√£o encontrada');
                    return { success: false, error: 'Fun√ß√£o exportarTabelaSIAA n√£o encontrada' };
                }
            },
            args: [cursoSelecionado]
        });
        
        console.log('üìä Resultado da execu√ß√£o:', results);
        
        const result = results[0]?.result;
        
        if (result && !result.success) {
            throw new Error(result.error || 'Erro na execu√ß√£o da fun√ß√£o');
        }
        
        console.log('‚úÖ Extra√ß√£o iniciada com sucesso');
        
        return { success: true };
        
    } catch (error) {
        console.error('‚ùå Erro na extra√ß√£o:', error);
        
        // Notificar erro
        chrome.runtime.sendMessage({
            action: 'extractionError',
            error: error.message
        }).catch(err => console.log('‚ÑπÔ∏è Popup pode estar fechado:', err));
        
        return { success: false, error: error.message };
    }
}

// Listener para mensagens
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // Filtrar apenas mensagens com actions v√°lidas
    if (!request || !request.action) {
        console.warn('‚ö†Ô∏è Mensagem sem action recebida no background:', request);
        return;
    }
    
    console.log('üì® Mensagem recebida no background:', request.action);
    if (request.cursoSelecionado) {
        console.log('üìå cursoSelecionado recebido no background:', request.cursoSelecionado);
    }
    
    if (request.action === 'executeExtraction') {
        console.log('üéØ Processando solicita√ß√£o de extra√ß√£o para tab:', request.tabId);
        
        // Executar extra√ß√£o de forma ass√≠ncrona
        executeExtraction(request.tabId, request.cursoSelecionado)
            .then(result => {
                console.log('‚úÖ Extra√ß√£o conclu√≠da:', result);
                sendResponse(result);
            })
            .catch(error => {
                console.error('‚ùå Erro na extra√ß√£o:', error);
                sendResponse({ success: false, error: error.message });
            });
        
        // Retornar true para indicar resposta ass√≠ncrona
        return true;
    }
    
    if (request.action === 'captureData') {
        console.log('üíæ Salvando dados capturados...');
        
        // Primeiro buscar dados antigos
        chrome.storage.local.get(['siaa_data_csv'], (oldData) => {
            // Fun√ß√µes auxiliares para parse/gerar CSV com suporte m√≠nimo a aspas
            function parseCSVLine(line) {
                const values = [];
                let currentValue = '';
                let inQuotes = false;
                for (let i = 0; i < line.length; i++) {
                    const char = line[i];
                    const nextChar = line[i + 1];
                    if (char === '"') {
                        if (inQuotes && nextChar === '"') {
                            // Aspas duplas escapadas
                            currentValue += '"';
                            i++; // pular pr√≥xima
                        } else {
                            inQuotes = !inQuotes;
                        }
                    } else if (char === ',' && !inQuotes) {
                        values.push(currentValue);
                        currentValue = '';
                    } else {
                        currentValue += char;
                    }
                }
                values.push(currentValue);
                return values.map(v => v.trim());
            }

            function csvToObjects(csv) {
                if (!csv) return [];
                const lines = csv.split('\n').filter(l => l.trim());
                if (lines.length < 2) return [];
                const headers = parseCSVLine(lines[0]);
                return lines.slice(1).map(line => {
                    const values = parseCSVLine(line);
                    const obj = {};
                    headers.forEach((h, idx) => obj[h] = values[idx] || '');
                    return obj;
                });
            }

            function objectsToCSV(objs, headers) {
                const headerLine = headers.join(',');
                const lines = objs.map(obj => headers.map(h => {
                    const val = String(obj[h] || '').replace(/"/g, '""');
                    return val.includes(',') ? `"${val}"` : val;
                }).join(','));
                return [headerLine, ...lines].join('\n');
            }

            // Mesclar removendo duplicatas por ID Oferta
            const oldObjs = csvToObjects(oldData.siaa_data_csv);
            const newObjs = csvToObjects(request.csv);

            const map = new Map();
            [...oldObjs, ...newObjs].forEach(obj => {
                const key = obj['ID Oferta'] || obj['Id Oferta'] || obj['IdOferta'] || obj['idOferta'];
                if (key) {
                    map.set(key, obj); // mant√©m o √∫ltimo (novo) caso de duplicata
                }
            });

            const mergedObjs = Array.from(map.values());
            // Usar cabe√ßalhos do novo CSV se existirem, sen√£o do antigo
            const headerLine = request.csv.split('\n')[0] || oldData.siaa_data_csv?.split('\n')[0];
            const headers = parseCSVLine(headerLine);
            const mergedCsv = objectsToCSV(mergedObjs, headers);

            // Prefixar BOM para compatibilidade com Excel / UTF-8
            const csvWithBom = '\uFEFF' + mergedCsv;

            const saveData = {
                siaa_data_csv: csvWithBom,
                siaa_data_timestamp: request.timestamp || Date.now()
            };
            
            chrome.storage.local.set(saveData, () => {
                if (chrome.runtime.lastError) {
                    console.error('‚ùå Erro ao salvar dados de ofertas:', chrome.runtime.lastError);
                } else {
                    console.log(`üíæ Dados de ofertas armazenados com sucesso. Total de ofertas: ${mergedObjs.length}`);
                    console.log(`üìä Tamanho do CSV salvo: ${saveData.siaa_data_csv.length} caracteres`);
                    chrome.runtime.sendMessage({ action: 'dataStored' }).catch(err => console.log('‚ÑπÔ∏è Popup pode estar fechado:', err));
                }
            });
        });
        
        sendResponse({ success: true });
        return true;
    }
    
    if (request.action === 'extractionComplete') {
        console.log('üéâ Extra√ß√£o completa recebida');
        
        // Repassar para o popup
        chrome.runtime.sendMessage({
            action: 'extractionComplete'
        }).catch(err => console.log('‚ÑπÔ∏è Popup pode estar fechado:', err));
        
        sendResponse({ success: true });
        return true;
    }
    
    if (request.action === 'extractionProgress') {
        console.log('üìà Progresso da extra√ß√£o:', request.message);
        
        // Repassar para o popup
        chrome.runtime.sendMessage({
            action: 'extractionProgress',
            message: request.message
        }).catch(err => console.log('‚ÑπÔ∏è Popup pode estar fechado:', err));
        
        sendResponse({ success: true });
        return true;
    }
    
    if (request.action === 'captureStudentData') {
        console.log('üéì Salvando dados de alunos capturados...');
        
        // Primeiro buscar dados antigos de alunos
        chrome.storage.local.get(['siaa_students_csv'], (oldData) => {
            // Fun√ß√µes auxiliares para parse/gerar CSV com suporte m√≠nimo a aspas (IGUAIS √†s das ofertas)
            function parseCSVLine(line) {
                const values = [];
                let currentValue = '';
                let inQuotes = false;
                for (let i = 0; i < line.length; i++) {
                    const char = line[i];
                    const nextChar = line[i + 1];
                    if (char === '"') {
                        if (inQuotes && nextChar === '"') {
                            // Aspas duplas escapadas
                            currentValue += '"';
                            i++; // pular pr√≥xima
                        } else {
                            inQuotes = !inQuotes;
                        }
                    } else if (char === ',' && !inQuotes) {
                        values.push(currentValue);
                        currentValue = '';
                    } else {
                        currentValue += char;
                    }
                }
                values.push(currentValue);
                return values.map(v => v.trim());
            }

            function csvToObjects(csv) {
                if (!csv) return [];
                const lines = csv.split('\n').filter(l => l.trim());
                if (lines.length < 2) return [];
                const headers = parseCSVLine(lines[0]);
                return lines.slice(1).map(line => {
                    const values = parseCSVLine(line);
                    const obj = {};
                    headers.forEach((h, idx) => obj[h] = values[idx] || '');
                    return obj;
                });
            }

            function objectsToCSV(objs, headers) {
                const headerLine = headers.join(',');
                const lines = objs.map(obj => headers.map(h => {
                    const val = String(obj[h] || '').replace(/"/g, '""');
                    return val.includes(',') ? `"${val}"` : val;
                }).join(','));
                return [headerLine, ...lines].join('\n');
            }

            // Mesclar removendo duplicatas por RGM (chave √∫nica dos alunos)
            const oldObjs = csvToObjects(oldData.siaa_students_csv);
            const newObjs = csvToObjects(request.csv);

            const map = new Map();
            [...oldObjs, ...newObjs].forEach(obj => {
                const key = obj['RGM'] || obj['Rgm'] || obj['rgm'] || obj['Registro'] || obj['registro'];
                if (key) {
                    map.set(key, obj); // mant√©m o √∫ltimo (novo) caso de duplicata
                }
            });

            const mergedObjs = Array.from(map.values());
            // Usar cabe√ßalhos do novo CSV se existirem, sen√£o do antigo
            const headerLine = request.csv.split('\n')[0] || oldData.siaa_students_csv?.split('\n')[0];
            const headers = parseCSVLine(headerLine);
            const mergedCsv = objectsToCSV(mergedObjs, headers);

            // Prefixar BOM para compatibilidade com Excel / UTF-8
            const csvWithBom = '\uFEFF' + mergedCsv;

            const studentData = {
                siaa_students_csv: csvWithBom,
                siaa_students_timestamp: request.timestamp || Date.now()
            };
            
            chrome.storage.local.set(studentData, () => {
                if (chrome.runtime.lastError) {
                    console.error('‚ùå Erro ao salvar dados de alunos:', chrome.runtime.lastError);
                } else {
                    console.log(`üíæ Dados de alunos mesclados e armazenados com sucesso. Total de alunos: ${mergedObjs.length}`);
                    console.log(`üìä Tamanho do CSV de alunos salvo: ${studentData.siaa_students_csv.length} caracteres`);
                    chrome.runtime.sendMessage({ action: 'studentsDataStored' }).catch(err => console.log('‚ÑπÔ∏è Popup pode estar fechado:', err));
                }
            });
        });
        
        sendResponse({ success: true });
        return true;
    }
});

// Listener para clique no √≠cone da extens√£o
chrome.action.onClicked.addListener(async (tab) => {
    console.log('üñ±Ô∏è √çcone da extens√£o clicado na aba:', tab.id);
    
    try {
        // Verificar se est√° na p√°gina correta
        if (!tab.url.includes('siaa.cruzeirodosul.edu.br')) {
            // Navegar para o SIAA se n√£o estiver
            await chrome.tabs.update(tab.id, {
                url: 'https://siaa.cruzeirodosul.edu.br/novo-siaa/secure/core/home.jsf'
            });
            return;
        }
        
        // Se j√° estiver no SIAA, o popup ser√° aberto automaticamente
        console.log('‚úÖ Usu√°rio no SIAA - Popup ser√° exibido');
        
    } catch (error) {
        console.error('‚ùå Erro ao processar clique:', error);
    }
});

// Listener para mudan√ßas de aba
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    // Verificar se a p√°gina foi carregada completamente
    if (changeInfo.status === 'complete' && tab.url) {
        
        // Log para debug
        if (tab.url.includes('siaa.cruzeirodosul.edu.br')) {
            console.log('üìç Navega√ß√£o no SIAA detectada:', tab.url);
            
            // Verificar se est√° na p√°gina correta
            if (tab.url.includes('novo-siaa/secure/core/home.jsf')) {
                console.log('‚úÖ Usu√°rio na p√°gina inicial do SIAA');
                
                // Atualizar badge (opcional)
                chrome.action.setBadgeText({
                    tabId: tabId,
                    text: '‚úì'
                });
                chrome.action.setBadgeBackgroundColor({
                    tabId: tabId,
                    color: '#ebb55e'
                });
            } else {
                // Limpar badge se n√£o estiver na p√°gina correta
                chrome.action.setBadgeText({
                    tabId: tabId,
                    text: ''
                });
            }
        } else {
            // Limpar badge se n√£o estiver no SIAA
            chrome.action.setBadgeText({
                tabId: tabId,
                text: ''
            });
        }
    }
});

// Listener para erros n√£o capturados
self.addEventListener('error', (event) => {
    console.error('‚ùå Erro n√£o capturado no background script:', event.error);
});

// Listener para promises rejeitadas
self.addEventListener('unhandledrejection', (event) => {
    console.error('‚ùå Promise rejeitada no background script:', event.reason);
});

console.log('‚úÖ SIAA Data Extractor - Background Script configurado'); 